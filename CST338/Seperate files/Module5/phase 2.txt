import java.awt.*;
import java.util.Random;
import javax.swing.*;
import javax.swing.border.LineBorder;
import javax.swing.border.TitledBorder;

public class phase2 {
   static int NUM_CARDS_PER_HAND = 7;
   static int  NUM_PLAYERS = 2;
   static JLabel[] computerLabels = new JLabel[NUM_CARDS_PER_HAND];
   static JLabel[] humanLabels = new JLabel[NUM_CARDS_PER_HAND];  
   static JLabel[] playedCardLabels  = new JLabel[NUM_PLAYERS]; 
   static JLabel[] playLabelText  = new JLabel[NUM_PLAYERS]; 
   
   public static void main(String[] args) {
      // test new deck functions
      Deck deck1 = new Deck(1);   
      Card card1 = new Card('2', Card.Suit.CLUBS);
      
      System.out.println("total cards in deck: " + deck1.getNumCards());
      System.out.println("adding 2C: " + deck1.addCard(card1));
      System.out.println("removing 2C: " + deck1.removeCard(card1));
      System.out.println("removing 2C: " + deck1.removeCard(card1));
      System.out.println("removing 2C: " + deck1.removeCard(card1));
      System.out.println("removing 2C: " + deck1.removeCard(card1));
      System.out.println("adding 2C: " + deck1.addCard(card1));
      System.out.println("total cards in deck: " + deck1.getNumCards());
      
      // show original deck
      deck1 = new Deck();
      System.out.println("\nFresh deck:");
      for (int i = 1; i < (Deck.CARDS_PER_PACK * 1) + 1; i++) {
         Card dealtCard = deck1.dealCard();
         System.out.println("Card" + i + ": " + dealtCard.toString());   
      }
      
      //shuffle cards
      deck1 = new Deck();
      deck1.shuffle();
      System.out.println("\nShuffled deck:");
      for (int i = 1; i < (Deck.CARDS_PER_PACK * 1) + 1; i++) {
         Card dealtCard = deck1.dealCard();
         System.out.println("Card" + i + ": " + dealtCard.toString());   
      }
      
      //sort deck
      deck1 = new Deck();
      deck1.shuffle();
      deck1.sort();
      System.out.println("\nSorted Deck:");
      for (int i = 1; i < (Deck.CARDS_PER_PACK * 1) + 1; i++) {
         Card dealtCard = deck1.dealCard();
         System.out.println("Card" + i + ": " + dealtCard.toString());   
      }
      
      // GUI demonstration
      GUICard.loadCardIcons();
      
      // establish main frame in which program will run
      CardTable myCardTable 
         = new CardTable("CardTable", NUM_CARDS_PER_HAND, NUM_PLAYERS);
      myCardTable.setSize(800, 600);
      myCardTable.setLocationRelativeTo(null);
      myCardTable.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

      // show everything to the user
      myCardTable.setVisible(true);

      // CREATE LABELS ----------------------------------------------------
      // creates 7 back card icons as labels for computer
      for (int i = 0; i < NUM_CARDS_PER_HAND; i++) 
         computerLabels[i] = new JLabel(GUICard.getBackCardIcon());

      // creates 7 random cards as player cards
      for (int i = 0; i < NUM_CARDS_PER_HAND; i++) 
         humanLabels[i] = 
         new JLabel(GUICard.getIcon(generateRandomCard()));
      
      // creates the played hand
      for (int i = 0; i < NUM_PLAYERS; i++) 
         playedCardLabels[i] = 
         new JLabel(GUICard.getIcon(generateRandomCard()));
      
      // create the played text
      playLabelText[0] = new JLabel("Computer", JLabel.CENTER);
      playLabelText[1] = new JLabel("Player", JLabel.CENTER);
  
      // ADD LABELS TO PANELS -----------------------------------------
      for (int i = 0; i < NUM_CARDS_PER_HAND; i++) 
         myCardTable.panelComputerHand.add(computerLabels[i]);
      
      for (int i = 0; i < NUM_CARDS_PER_HAND; i++) 
         myCardTable.panelHumanHand.add(humanLabels[i]);
      
      // and two random cards in the play region (simulating a computer/hum ply)
      for (JLabel label: playedCardLabels) 
         myCardTable.panelPlayArea.add(label);
      
      for (JLabel label: playLabelText) 
         myCardTable.panelPlayArea.add(label);
      
      // show everything to the user
      myCardTable.setVisible(true);
   }
   
   /** returns a random card from the deck including jokers */
   static Card generateRandomCard() {
      String suit = GUICard.turnIntIntoCardSuit(getRandomNumber(0,3));
      String value = GUICard.turnIntIntoCardValue((getRandomNumber(0,13)));
      Card randomCard = new Card(value, suit);
      
      return randomCard;
   }
   
   /** helper function for generateRandomCard() -- returns an int within
    * the range.
    * @param min >= 0
    * @param max
    * @return
    */
   private static int getRandomNumber(int min, int max) {
      Random random = new Random();
      return random.nextInt((max - min) + 1) + min;
  }
}

class CardTable extends JFrame{
   static int MAX_CARDS_PER_HAND = 56;
   static int MAX_PLAYERS = 2;  // for now, we only allow 2 person games
   private int numCardsPerHand;
   private int numPlayers;
   public JPanel panelComputerHand, panelHumanHand, panelPlayArea;

   public CardTable(String title, int NumCardsPerHand, int NumPlayers)  {
      super(title);
      
      if (!(NumCardsPerHand > 0 && NumCardsPerHand < MAX_CARDS_PER_HAND)) 
         numCardsPerHand = MAX_CARDS_PER_HAND;;

      if (!(NumPlayers > 0 && NumPlayers < MAX_PLAYERS))
         numPlayers = MAX_PLAYERS;
      
      numCardsPerHand = NumCardsPerHand;
      numPlayers = NumPlayers;
      
      setLayout(new BorderLayout());

      panelComputerHand = new JPanel();
      panelComputerHand.setLayout(new GridLayout(1, 7));
      panelComputerHand.setBorder(new TitledBorder(new LineBorder(Color.black),
            "Computer's Hand:"));
      add(panelComputerHand, BorderLayout.NORTH);
      
      panelPlayArea = new JPanel();
      panelPlayArea.setLayout(new GridLayout(2, numPlayers));
      panelPlayArea.setBorder(new TitledBorder(new LineBorder(Color.black),
            "Play Area:"));
      add(panelPlayArea, BorderLayout.CENTER);
      
      panelHumanHand = new JPanel();
      panelHumanHand.setLayout(new GridLayout(1, NumCardsPerHand));
      panelHumanHand.setBorder(new TitledBorder(new LineBorder(Color.black),
            "Player's Hand:"));
      add(panelHumanHand, BorderLayout.SOUTH);

   }
   
   /**Getters*/
   public int getNumCardsPerHand() {
      return numCardsPerHand;
   }

   public int getNumPlayers() {
      return numPlayers;
   }

   /**Setters
    * Probably not needed?*/
   public boolean setNumCardsPerHand(int newNum) {
      if (!(numCardsPerHand > 0 && numCardsPerHand < MAX_CARDS_PER_HAND))
         return false;
      
      numCardsPerHand = newNum;
      return true;
   }

   public boolean setNumPlayers(int newNum) {
      if (!(numPlayers > 0 && numPlayers < MAX_PLAYERS))
         return false;
      
      numPlayers = newNum;
      return true;
   }
}

class GUICard {
   private static Icon[][] iconCards = new ImageIcon[14][4]; // 14 = A thru K + joker
   private static Icon iconBack;
   static boolean iconsLoaded = false;
   
   public GUICard() {
      loadCardIcons();
   }
   
   /**Load Card Icons + Helpers*/
   public static void loadCardIcons() {
      if (iconsLoaded) 
         return;
      
      final int MAX_CARD_VALUES = 13;
      final int MAX_CARD_SUITS = 3;
      String filename = "images/";

      // build suits
      for (int i = 0; i <= MAX_CARD_SUITS; i++) {
         for (int j = 0; j <= MAX_CARD_VALUES; j++) {
            filename += turnIntIntoCardValue(j) + turnIntIntoCardSuit(i) +
                  ".gif";
            iconCards[j][i] = new ImageIcon(filename);
            filename = "images/";
         }    
      }
      
      iconBack = new ImageIcon("images/BK.gif");
      iconsLoaded = true;
   }
   
   public static String turnIntIntoCardValue(int k) {
      switch(k) {
      case 0:
         return "X";
      case 1:
         return "A";
      case 2:
         return "2";
      case 3:
         return "3";
      case 4:
         return "4";
      case 5:
         return "5";
      case 6:
         return "6";
      case 7:
         return "7";
      case 8:
         return "8";
      case 9:
         return "9";
      case 10:
         return "T";
      case 11:
         return "J";
      case 12: 
         return "Q";
      case 13:
         return "K";
      default:
         return String.valueOf(k);
      }
   }
   
   public static String turnIntIntoCardSuit(int k) {
      String suit = "";
      
      switch(k) {
      case 0:
         return suit = "C";
      case 1:
         return suit = "D";
      case 2:
         return suit = "H";
      case 3:
         return suit = "S";
      default:
         return suit;
      }
   }
   
   /** getIcon and helpers*/
   public static Icon getIcon(Card card) {
      if (card.errorFlag) {
         //return error?
         
      }
      int cardValueIndex = getIconValueIndex(card.value);
      int suitIndex = getIconSuitIndex(card.suit);
      
      //icon does not support clone() AND icon doesnt 
      // have a copy constructor... nope their safe :)
      return iconCards[cardValueIndex][suitIndex];
   }
   
   private static int getIconValueIndex(char val) {
      switch (val) {
      case 'X':
         return 0;
      case 'A':
         return 1;
      case '2':
         return 2;
      case '3':
         return 3;
      case '4':
         return 4;
      case '5':
         return 5;
      case '6':
         return 6;
      case '7':
         return 7;
      case '8':
         return 8;
      case '9':
         return 9;
      case 'T':
         return 10;
      case 'J':
         return 11;
      case 'Q': 
         return 12;
      case 'K':
         return 13;
      default:
         return 13;
      }
   }
   
   private static int getIconSuitIndex(Card.Suit suit) {
      switch (suit) {
      case CLUBS:
         return 0;
      case DIAMONDS:
         return 1;
      case HEARTS:
         return 2;
      case SPADES:
         return 3;
      default:
         return 0;
      }
   }
   
   /** get BackCardIcon*/
   public static Icon getBackCardIcon() {
      return iconBack;
   }
}

class Card {
   public enum Suit {
      CLUBS, DIAMONDS, HEARTS, SPADES;
   }
   public char value;
   public Suit suit;
   public boolean errorFlag = false;
   public static char[] valueRanks = {'X', 'A', '2', '3', '4', '5', '6', '7', 
         '8', '9', 'T', 'J', 'Q', 'K'}; 

   /**Constructors */
   public Card(char value, Suit suit) {
      set(value, suit);
   }

   public Card() {
      set('A', Suit.SPADES );
   }

   public Card (Card cardToCopy) {
      set( cardToCopy.value, cardToCopy.suit );
   }

   public Card (String value, String suit) {
      if (suit == "C") {
         set(value.charAt(0), Suit.CLUBS);
      }
      else if (suit == "D") {
         set(value.charAt(0), Suit.DIAMONDS);
      }
      else if (suit == "H") {
         set(value.charAt(0), Suit.HEARTS);
      }
      else if (suit == "S") {
         set(value.charAt(0), Suit.SPADES);
      }
   }
   
   // getters
   public char getValue() {
      return this.value;
   }

   public Suit getSuit() {
      return this.suit;
   }

   public boolean getErrorFlag () {
      return this.errorFlag;
   }

   /**toString
    * Return a string representation of class
    * or returns [Invaid Card] if errorFlag
    * is true*/
   public String toString() {
      if (errorFlag) 
         return "[Invalid Card]";
      else 
         return value + " of " + suit;
   }

   /**set
    * setter for class variables calls
    * isValid to check for correctness of
    * inputs. If all valid, sets variables
    * if not, then does not set and sets errorFlag
    * to true*/
   public boolean set(char value, Suit suit) {
      value = Character.toUpperCase(value);

      if(isValid(value, suit)) {
         this.value = value;
         this.suit = suit;
         return true;
      } 
      else {
         this.errorFlag = true;
         return false;
      }
   }


   /**equals
    * Check for equality, true if equal
    * false if not*/
   public boolean equals( Card card ) {
      return ((card.value == this.value)&&(this.suit == card.suit));
   }


   /**
    * isValid 
    *   Function only needs to validate card value,
    *   since input to calling functions take
    *   enum as input, it is automatically
    *   validated
    *   
    *   input is expected to be a capital character or number as a char
    *   */
   private boolean isValid (char value, Suit suit) {
      char[] acceptableCards = {'A', '2', '3', '4', '5', '6', '7', '8', '9', 
            'T', 'J', 'Q', 'K', 'X' };      
      for (char card: acceptableCards) {
         if (card == value) {
            return true;
         }
      }
      return false;   
   }

   /**THIS IS A BIG ASSUMPTION
    * I ASSUME THIS IS A SAFE BY REFERENCE PASSING
    * I.E. THE VOID DOES NOT RETURN A SORTED ARRAY
    * BUT INSTEAD SORTS THE CARD[] ARRAY PASSED IN*/
   static void arraySort(Card[] arrayToSort, int arraySize) {
      // per professor: spades, hearts, diamonds, clubs is the order of sorting
      boolean arraySorted = false;

      while (!arraySorted) {
         arraySorted = true;
         for (int i = 0; i < (arraySize - 1); i++) {
            if (suitGreaterThan(arrayToSort[i].suit, arrayToSort[i + 1].suit)) {
               // if suit is greater then we 
               // must swap
               Card tmp = new Card(arrayToSort[i + 1]); //copy constructor
               arrayToSort[i + 1] = arrayToSort[i];
               arrayToSort[i] = tmp;
               arraySorted = false;
            } 
            else {
               // if suit is not greater than
               // we must check value
               if ((arrayToSort[i].suit == arrayToSort[i + 1].suit) && 
                     (valueGreaterThan(arrayToSort[i].value, 
                           arrayToSort[i + 1].value ))) {
                  Card tmp = new Card(arrayToSort[i + 1]); //copy constructor
                  arrayToSort[i + 1] = arrayToSort[i];
                  arrayToSort[i] = tmp;
                  arraySorted = false;
               } 
            }
         }

         if (arraySorted) {
            break;
         }
      }
   }

   /**return card1 > card2*/
   public static boolean cardGreaterThan(Card card1, Card card2) {
      boolean suitbool = suitGreaterThan(card1.suit, card2.suit);
      boolean valbool = valueGreaterThan(card1.value, card2.value);
      return suitbool || valbool;
   }

   /**suitGreaterThan
    * helper function for arraySort
    * returns suit1 > suit2 as per prof instructions
    * in order of: spades, hearts, diamonds, clubs*/
   private static boolean suitGreaterThan(Suit suit1, Suit suit2) {
      int suit1val;
      int suit2val;

      switch (suit1) {
      case CLUBS:
         suit1val = 0;
         break;
      case DIAMONDS:
         suit1val = 1;
         break;
      case HEARTS:
         suit1val = 2;
         break;
      case SPADES:
         suit1val = 3;
         break;
      default:
         suit1val = 0; // will never happen, compiler complained   
      }

      switch (suit2) {
      case CLUBS:
         suit2val = 0;
         break;
      case DIAMONDS:
         suit2val = 1;
         break;
      case HEARTS:
         suit2val = 2;
         break;
      case SPADES:
         suit2val = 3;
         break;
      default:
         suit2val = 0; // will never happen, compiler complained   
      }
      return (suit1val > suit2val);
   }

   /**valueGreaterThan
    * helper function for arraySort
    * returns val1 > val2 as per prof instructions
    * in order of: valuRanks*/
   private static boolean valueGreaterThan(char val1, char val2) {
      int val1int = -1;
      int val2int = -1;
      
      for (int i = 0; i < valueRanks.length; i++) {
         if (valueRanks[i] == val1) {
            val1int = i;
            break;
         }
      }

      for (int i = 0; i < valueRanks.length; i++) {
         if (valueRanks[i] == val2) {
            val2int = i;
            break;
         }
      }
      return (val1int > val2int);
   }
}

class Hand {
   public static final int MAX_CARDS = 50;
   private Card[] myCards;
   private int numCards = 0;
   
   // Constructor selected hand size
   public Hand(int handSize) {
      if (handSize <= 0) {
         handSize = 0;
      }
      myCards = new Card[handSize];
   }
   
   // General constructor
   public Hand() {
      myCards = new Card[MAX_CARDS];
   }
   
   // resets the numCards count, essentially resetting the hand
   void resetHand() {
      if (numCards == 0) {
         System.out.println("Empty hand.");
         return;
      }
      else {
         numCards = 0;
         return;
      }
   }
   
   // Adds a card to the hand up to the limit (50)
   boolean takeCard(Card card) {
      if (numCards >= MAX_CARDS) {
         return false;
      }
      
      if (card.getErrorFlag() == false) {
         myCards[numCards] = new Card(card);
         numCards++;
         return true;
      }
      else {
         return false;
      }
   }
   
   // Returns a card object, then shortens the amount of cards in the hand by 1
   public Card playCard() {
      Card playedCard = new Card(myCards[numCards - 1]);
      numCards--;
      return playedCard;
   }
   
   // Creates a string of the contents of the hand with formatting
   public String toString() {
      String handString = "";
      
      if (numCards == 0) {
         return handString = "Hand: ( )";
      }
      
      handString = "Hand:\n( ";
      
      for (int i = 0; i <= numCards - 1; i++) {
         handString += myCards[i].toString();
         if (i == 0) {
            handString += " , ";
         }
         else if (i == numCards - 1) {
            handString += " )\n";
         }
         else if (i%4 == 0) {
            handString += "\n";
         }
         else {
            handString += " , ";
         }
      }
      return handString;
   }
   
   // Accessor for numCards
   public int getNumCards() {
      return numCards;
   }
   
   // If the passed index is out of bounds or indicates an empty index, it
   // returns a bad card, otherwise returns the card at the index
   public Card inspectCard(int k) {
      if ((k >= MAX_CARDS) || (k < 0) || (myCards[k] == null)) {
         Card badCard = new Card();
         badCard.errorFlag = true;
         return badCard;
      }
      else {
         Card goodCard = myCards[k];
         return goodCard;
      }
   }
   
   void sort() {
      Card.arraySort(myCards,numCards);
   }
   
   public Card playCard(int cardIndex)
   {
      if (numCards == 0) 
         return new Card('M', Card.Suit.SPADES);  //error card
      
      //Decreases numCards.
      Card card = myCards[cardIndex];
      
      numCards--;
      for(int i = cardIndex; i < numCards; i++)
         myCards[i] = myCards[i+1];
      
      myCards[numCards] = null;
      
      return card;
    }
}

class Deck {
   //holds up to 6 packs of 52 cards and 4 jokers
   public static final int MAX_PACKS = 6;
   public static final int CARDS_PER_PACK = 56;
   private static Card[] masterPack;
   private Card[] cards;
   private int topCard = 0;
   private int numPack = 0;

   //Constructor with selected deck packs
   public Deck(int numPacks) {
      // if an invalid number is entered, numPack is set to zero, and deck
      // is not initialized.
      if ((numPacks < 1) && (numPacks > MAX_PACKS)) {
         this.numPack = 0;
      }
      else {
         allocateMasterPack();
         cards = new Card[numPacks * CARDS_PER_PACK];
         init(numPacks);
         this.numPack = numPacks;
      }
   }
   
   //General constructor
   // default to creating 1 pack of cards
   public Deck() {
      allocateMasterPack();
      cards = new Card[CARDS_PER_PACK];
      init(1);
      this.numPack = 1;
   }

   //Create deck based on how many packs entered.
   public void init(int numPacks) {
      int placement = 0;
      //create the deck
      for(int i = 0; i < numPacks; i++) {
         for(int j = 0; j < CARDS_PER_PACK; j++) {
            cards[placement] = masterPack[j];
            placement++;
         }
      }
      //assign value to top card
      topCard = placement - 1;
   }

   //Adds card into the deck
   public boolean addCard(Card card) {
      //checks if there's too many instances of the card being added
      Card checkCard = new Card();
      int instances = 0;
      for(int i = 0; i <= topCard; i++) {
         checkCard = inspectCard(i + 1);
         if(checkCard.equals(card))
            instances++;
      }

      //return false if too many instances per pack
      if(instances >= numPack)
         return false;
      else {
          cards[topCard + 1] = card;
          topCard++;
          return true;
      }
   }

   //Removes card from the deck
   public boolean removeCard(Card card) {
      //checks if there is an instance of the card in the deck
      Card checkCard = new Card();
      for(int i = 0; i <= topCard; i++) {
         checkCard = inspectCard(i + 1);
         if(checkCard.equals(card)) {
            //replaces target card with top card
            cards[i] = cards[topCard];
            topCard--;
            return true;
         }
      }
      return false;
   }

   //Shuffle the deck
   public void shuffle() {
      Card tempValue;
      int rand = 0;
      //go through each card and randomly replace with card in unshuffled deck
      for(int i = 0; i < (topCard); i++) {
         //get a random placement in unshuffled deck
         rand = (int)(Math.random() * (cards.length - i) + i);
         tempValue = cards[i];
         cards[i] = cards[rand];
         cards[rand] = tempValue;
      }
   }

   //Sort the deck
   public void sort() {
      Card.arraySort(cards, (topCard + 1));
   }

   //returns number of cards in deck
   public int getNumCards() {
      return topCard + 1;
   }

   //returns the top card and remove it from the deck.
   public Card dealCard() {
      Card dealCard = cards[topCard];
      topCard--;
      return dealCard;
   }

   //returns the int of the top card
   public int topCard() {
      return this.topCard;
   }

   //returns the specified card at a given position
   public Card inspectCard(int k) {
      if ((k > topCard) || (k < 0)){
         //return exception if the entered number is out of bounds
         Card badCard = new Card();
         badCard.errorFlag = true;
         return badCard;
      } else {
         //return card if it is within the deck's values
         Card goodCard = cards[k - 1];
         return goodCard;
      }
   }

   private static void allocateMasterPack() {
      //checks if the masterPack has already been allocated
      if (masterPack == null){
         masterPack = new Card[CARDS_PER_PACK];
         char[] value = {'K', 'Q', 'J', 'T', '9', '8', '7', '6', '5', '4', '3', '2', 'A', 'X'};
         Card placementCard;
         int placement = 0;
         
         //inserts unique cards into the deck
         for (Card.Suit singleSuit: Card.Suit.values()) {
            for (char singleValue: value) {
               placementCard = new Card(singleValue, singleSuit);
               masterPack[placement] = placementCard;
               placement++;
            }
         }
      }
   }
}